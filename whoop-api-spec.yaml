openapi: 3.0.0
servers:
  - url: "https://api-7.whoop.com"
info:
  version: 1.0.1
  title: Unofficial Whoop API
  description: >-
    This is an unofficial and unsupported API for Whoop that's been discovered and documented. It's not entirely complete, but it already has some useful functionality as it continues to evolve.  The first thing you're going to need is your OAuth token, which you can obtain by sending the /oath/token authentication request described in this document.

paths:
  /users/{userId}:
    get:
      summary: Get User Profile
      description: >-
        Get User Profile by ID
      security:
        - bearerAuth: []
      parameters:
        - name: "userId"
          required: true
          schema:
            type: "integer"
            format: "int32"
            default: 238633
          in: "path"
        - name: "include"
          required: false
          in: "query"
          schema: 
            type: "array"
            items:
              type: "string"
              example:
                - profile
                - teams
            
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      tags:
        - users
  
  /users/{userId}/cycles:
    get: 
      summary: Get daily cycle data on a given date range
      description: >-
        This will get the strain/recovery/sleep/workout data for a given user over a specific date range.
      security: 
        - bearerAuth: []
      tags:
        - metrics
      parameters: 
        - name: "userId"
          required: true
          schema:
            type: "integer"
            format: "int32"
            default: 238633
          in: "path"
        - name: "start"
          schema:
            type: "string"
            format: "date-time"
            example: "2020-08-01T01:30:00.000Z"
          in: "query"
        - name: "end"
          schema:
            type: "string"
            format: "date-time"
            example: "2020-08-01T02:30:00.000Z"
          in: "query"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: "array"
                items:
                  $ref: "#/components/schemas/Cycle"
                
  /users/{userId}/metrics/heart_rate:
    get:
      summary: Get HeartRate for a date range
      description: >-
        Gets heartrate data in granularity of every 6, 60, or 600 seconds for a given date/time range. This is a slow request, so you should keep the date range tight
      security: 
        - bearerAuth: []
      tags:
        - metrics
      parameters: 
        - name: "sort"
          schema:
            type: "string"
          example: "t"
          in: "query"
        - name: "step"
          schema:
            type: "integer"
            format: "int32"
            example: "6|60|600"
            default: 60
          in: "query"
        - name: "userId"
          required: true
          schema:
            type: "integer"
            format: "int32"
            default: 238633
          in: "path"
        - name: "start"
          schema:
            type: "string"
            format: "date-time"
            example: "2020-08-01T01:30:00.000Z"
          in: "query"
        - name: "end"
          schema:
            type: "string"
            format: "date-time"
            example: "2020-08-01T02:30:00.000Z"
          in: "query"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/HeartRateDataSet"
          
  /oauth/token:
    post:
      summary: Get or Refresh OAuth Token
      description: >-
        Obtain OAuth token based on password grant type,and make it refreshable by getting a refresh token as well, or refresh the token by supplying a refresh_token.
          example payloads, are, for password auth:
           <pre>
           { 
             "username": "email@addr", 
             "password": "pass", 
             "grant_type": "password", 
             "issueRefresh": true
          }
           </pre> or, to refresh
           <pre>
            {
              "refresh_token": "your_refresh_token", 
              "grant_type": "refresh_token"
            }
           </pre>
        
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PasswordAuthRequest'
                - $ref: '#/components/schemas/RefreshTokenRequest'
            examples:
              Password:
                value:
                  username: "email@addr"
                  password: "myPassword"
                  grant_type: "password"
                  issueRefresh: true
              Refresh:
                value:
                  refresh_token: "myRefreshToken"
                  grant_type: "refresh_token"
      responses:
        '200':
          description: OAuth Token Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResult'
      tags:
        - auth
  /sports:
    get:
      summary: "list of activities types"
      description: "Gets the entire list of supported activity types on the whoop platform"
      tags:
        - reference data
      responses:
        '200':
          description: "Array of activity types"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/ActivityType'
                    
  /voice-of-whoop:
    post:
      summary: "Get the little text blurb that's displayed on the app"
      description: "Get a text statement for the given data set/type"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "integer"
                  format: "int32"
                  example: 238633
                  description: "user ID"
                viewId:
                  type: "integer"
                  format: "int32"
                  example: 238633
                  description: "seems to also be a user ID"
                targetData:
                  example:
                    comment: "Delete this comment. Either supply cycleId/prevCycleId, or activityId/prevActivity pair Either supply pair of cycles or pair of activities"
                    cycleId: 56789
                    prevCycleId: 01234
                  oneOf:
                    - $ref: "#/components/schemas/VoiceCycleSpan"
                    - $ref: "#/components/schemas/VoiceActivitySpan"
                    - $ref: "#/components/schemas/VoiceSingleCycle"
                    - $ref: "#/components/schemas/VoiceTimeSpan"
                    - $ref: "#/components/schemas/VoiceSingleActivity"
                pillar:
                  type: "string"
                  example: "recovery"
      responses:
        '200':
          description: Voice of Whoop
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/VoiceOfWhoop'
                  - $ref: "#/components/schemas/VoiceOfWhoopCycle"
      tags:
        - user interface
  /users/{userId}/sleeps/{sleepId}:
    get:
      security:
        - bearerAuth: []
      description: "Get individual sleep details"
      parameters:
        - name: "sleepId"
          schema:
            type: "integer"
            format: "int32"
          in: "path"
          required: true
          example: 93802122
        - name: "userId"
          schema:
            type: "integer"
            format: "int32"
          in: "path"
          required: true
          example: 238633
      tags:
        - details
      responses:
        '200':
          description: "Sleep details"
          content:
            application/json:
              schema:
                type: "object"
  /users/{userId}/sleeps/{sleepId}/survey-response:
    get:
      security:
        - bearerAuth: []
      description: "Get Survey Response for sleep "
      parameters:
        - name: "sleepId"
          schema:
            type: "integer"
            format: "int32"
          in: "path"
          required: true
          example: 93802122
        - name: "userId"
          schema:
            type: "integer"
            format: "int32"
          in: "path"
          required: true
          example: 238633
      tags:
        - details
        - surveys
      responses:
        '200':
          description: "Survey Response for Sleep"
          content:
            application/json:
              schema:
                type: "object"
        
  /users/{userId}/workouts/{workoutId}/survey-response:
    get:
      security:
        - bearerAuth: []
      description: "Get Survey Response for a workout "
      parameters:
        - name: "workoutId"
          schema:
            type: "integer"
            format: "int32"
          in: "path"
          required: true
          example: 93848982
        - name: "userId"
          schema:
            type: "integer"
            format: "int32"
          in: "path"
          required: true
          example: 238633
      tags:
        - details
        - surveys
      responses:
        '200':
          description: "Survey Response for a workout"
          content:
            application/json:
              schema:
                type: "object"
        
  /users/{userId}/workouts/{workoutId}:
    get:
      security:
        - bearerAuth: []
      description: "Get details of a workout "
      parameters:
        - name: "workoutId"
          schema:
            type: "integer"
            format: "int32"
          in: "path"
          required: true
          example: 93848982
        - name: "userId"
          schema:
            type: "integer"
            format: "int32"
          in: "path"
          required: true
          example: 238633
      tags:
        - details
      responses:
        '200':
          description: "Details for a workout"
          content:
            application/json:
              schema:
                type: "object"
        
  /reports/performance-optimization:
    get:
      security:
        - bearerAuth: []
      description: "Get Weekly Performance Summary for the current user "
      parameters:
        - name: "until"
          schema:
            type: "string"
            format: "date"
          in: "query"
          required: true
          description: "Seems to be a date of a Sunday"
          example: "2020-08-23"
      tags:
        - reports
      responses:
        '200':
          description: "Weekly performance assessment"
          content:
            application/json:
              schema:
                type: "object"    
components:
  schemas: 
    PasswordAuthRequest:
      properties:
        username:
          description: "Your email address"
          type: "string"
          example: "email@address.com"
        password:
          type: "string"
          example: "your_password"
        grant_type:
          type: "string"
          default: "password"
          example: "password"
        issueRefresh:
          type: "boolean"
          example: true
          default: true
          
    RefreshTokenRequest:
      properties:
        grant_type:
          type: "string"
          default: "refresh_token"
          example: "refresh_token"
        refresh_token:
          type: "string"
          example: "your-refresh-token"
    AuthResult:
      properties:
        access_token:
          type: "string"
        refresh_token:
          type: "string"
        expires_in:
          type: "integer"
          format: "int32"
        membership_status:
          type: "string"
          example: "active"
        needsProfileCompletion:
          type: "string"
          example: "0"
        token_type:
          type: "string"
          example: "Bearer"
        user:
          $ref: "#/components/schemas/User"
    
    User:
      properties:
        id:
          type: "integer"
          format: "int32"
        avatarUrl:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
        firstName:
          type: "string"
        lastName:
          type: "string"
        city:
          type: "string"
        country:
          type: "string"
        adminDivision:
          type: "string"
        fullName:
          type: "string"
        teams:
          type: "array"
        preferences:
          type: "object"
        email: 
          type: "string"
        username: 
          type: "string"
        privacyProfile:
          type: "object"
        profile:
          $ref: "#/components/schemas/Profile"
    Profile:
      properties:
        userId:
          type: "integer"
          format: "int32"
        bioDataId:
          type: "integer"
          format: "int32"
        height:
          type: "number"
          format: "float"
          description: "height in meters"
        weight:
          type: "number"
          format: "float"
          description: "weight in kg"
        birthday: 
          type: "string"
          format: "date-time"
        gender:
          type: "string"
        unitSystem:
          type: "string"
          example: "imperial"
        fitnessLevel:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
        timezoneOffset:
          type: "string"
          example: "+0300"
        id:
          type: "integer"
          format: "int32"
        maxHeartRate:
          type: "integer"
          format: "int32"
        minHeartRate:
          type: "integer"
          format: "int32"
        avgHeartRate:
          type: "number"
          format: "float"
        kilojoules:
          type: "number"
          format: "float"
        canUploadData:
          type: "boolean"
          default: true
          example: true
    MetricDataSet:
      properties:
        name:
          example: "heart_rate"
          type: "string"
        start:
          type: "integer"
          format: "int64"
    HeartRateDataSet:
      allOf:
        - $ref: "#/components/schemas/MetricDataSet"
        - type: "object"
          properties: 
            values:
              type: "array"
              items:
                type: "object"
                properties:
                  data: 
                    type: "integer"
                    format: "int32"
                    description: "heart rate"
                  time:
                    type: "integer"
                    format: "int64"
                    description: "timestamp in millis"
    Cycle:
      properties:
        days:
          type: "array"
          items: 
            type: "string"
            format: "date"
        during:
          $ref: "#/components/schemas/TimeSpan"
        id:
          type: "integer"
          format: "int32"
        lastUpdatedAt:
          type: "string"
          format: "date-time"
        predictedEnd:
          type: "string"
          format: "date-time"
        recovery:
          $ref: "#/components/schemas/Recovery"
        sleep:
          $ref: "#/components/schemas/SleepSummary"
        strain:
          $ref: "#/components/schemas/StrainSummary"
    Recovery:
      properties:
        blackoutUntil:
          type: "string"
        calibrating:
          type: "boolean"
        heartRateVariabilityRmssd:
          type: "number"
          format: "float"
        id:
          type: "integer"
          format: "int32"
        responded:
          type: "boolean"
        restingHeartRate:
          type: "integer"
          format: "int32"
        score:  
          type: "integer"
          format: "int32"
        state:
          type: "string"
          example: "complete"
        surveyResponseId:
          type: "integer"
          format: "int32"
        timestamp:
          type: "string"
          format: "date-time"
          
    SleepSummary:
      properties:
        id: 
          type: "integer"
          format: "int32"
        naps:
          type: "array"
          items:
            $ref: "#/components/schemas/Sleep"
        needBreakdown:
          $ref: "#/components/schemas/SleepNeedsBreakdown"
        qualityDuration:
          type: "integer"
          format: "int32"
        score:
          type: "integer"
          format: "int32"
        sleeps:
          type: "array"
          items:
            $ref: "#/components/schemas/Sleep"
        state:
          type: "string"
          example: "complete"
    Sleep:
      properties:
        cyclesCount:
          type: "integer"
          format: "int32"
        disturbanceCount:
          type: "integer"
          format: "int32"
        during:
          $ref: "#/components/schemas/TimeSpan"
        id: 
          type: "integer"
          format: "int32"
        inBedDuration:
          type: "integer"
          format: "int32"
        isNap:
          type: "boolean"
        latencyDuration:
          type: "integer"
          format: "int32"
        noDataDuration:
          type: "integer"
          format: "int32"
        qualityDuration:
          type: "integer"
          format: "int32"
        remSleepDuration:
          type: "integer"
          format: "int32"
        respiratoryRate:
          type: "number"
          format: "float"
        responded:
          type: "boolean"
        score: 
          type: "integer"
          format: "int32"
        sleepConsistency:
          type: "integer"
          format: "int32"
        sleepEfficiency:
          type: "number"
          format: "float"
        slowWaveSleepDuration:
          type: "integer"
          format: "int32"
        source:
          type: "string"
          example: "user"
        state:
          type: "string"
          example: "complete"
        surveyResponseId:
          type: "integer"
          format: "int64"
        timezoneOffset:
          type: "string"
          example: "+300"
        wakeDuration:
          type: "integer"
          format: "int32"
          
    SleepNeedsBreakdown:
      properties:
        baseline:
          type: "integer"
          format: "int32"
        debt:
          type: "integer"
          format: "int32"
        naps:
          type: "integer"
          format: "int32"
        strain:
          type: "integer"
          format: "int32"
        total:
          type: "integer"
          format: "int32"
    TimeSpan:
      properties:
        bounds:
          type: "string"
          example: "[)"
        lower: 
          type: "string"
          format: "date-time"
        upper:
          type: "string"
          format: "date-time"
    StrainSummary:
      properties:
        averageHeartRate:
          type: "integer"
          format: "int32"
        kilojoules:
          type: "number"
          format: "float"
        maxHeartRate:
          type: "integer"
          format: "int32"
        rawScore:
          type: "number"
          format: "double"
        score:
          type: "number"
          format: "double"
        state: 
          type: "string"
          example: "complete"
        workouts:
          type: "array"
          items:
            $ref: "#/components/schemas/Workout"
    Workout:
      properties: 
        altitudeChange:
          type: "string"
          description: "this might need to change, I only see null in responses"
        altitudeGain:
          type: "string"
          description: "this might need to change, I only see null in responses"
        averageHeartRate:
          type: "integer"
          format: "int32"
        cumulativeWorkoutStrain:
          type: "number"
          format: "float"
        distance:
          type: "number"
          format: "float"
        during:
          $ref: "#/components/schemas/TimeSpan"
        gpsEnabled:
          type: "boolean"
        id:
          type: "integer"
          format: "int32"
        kilojoules:
          type: "number"
          format: "float"
        maxHeartRate:
          type: "integer"
          format: "int32"
        rawScore:
          type: "number"
          format: "double"
        responded:
          type: "boolean"
        score:
          type: "number"
          format: "double"
        source:
          type: "string"
          example: "user"
        sportId:
          type: "integer"
          format: "int32"
          example: 1
        state:
          type: "string"
          example: "complete"
        surveyResponseId:
          type: "integer"
          format: "int32"
        timezoneOffset:
          type: "string"
          example: "+0300"
        zones:
          type: "array"
          items:
            type: "integer"
            format: "int32"
    VoiceOfWhoop:
      properties:
        bodyText:
          type: "string"
          example: "Your RHR is in the normal range. This indicates that your body is rested."
        flags:
          type: "object"
          example: 
            showCoachVow: true
        header:
          type: "string"
          example: "Body is rested."
        highlights:
          type: "object"
          description: "some subset of these might be found in the highlights value, or it could be an empty object.  The keys here seem to be unique, where 'd' seems to represent dashboard, and 's' seems to represent statistic. The example contains most values that have been discovered across various calls to the API. There's markup possible in the value of bodyText such as [d1|Some text] which converts it to a hyperlink that highlights (in red) the piece of data displayed on the screen when hovering over it."
          example:
            p1: 
              metricName: "sws"
              type: "sleep_stage"
            d0: 
              metricName: "sleep_performance"
              type: "dashboard"
            d1:
              metricName: "quality_duration"
              type: "dashboard"
            s1:
              metricName: "distrubances"
              type: "statistic"
            s3: 
              metricName: "latency"
              type: "statistic"
            s4:
              metricName: "sleep_eed"
              type: "statistic"
            s5:
              metricName: "debt"
              type: "statistic"
            s7: 
              metricName: "recent_strain"
              type: "statistic"
        secondsPositions:
          type: "array"
        whoop:
          description: "This seems to be the same as the BodyText"
          type: "string"
          example: "Your RHR is in the normal range. This indicates that your body is rested."
    VoiceOfWhoopCycle:
      description: "Multiple voice of whoops to cover an entire cycle's worth of data"
      properties:
        flags:
          type: "object"
        baseline:
          $ref: "#/components/schemas/VoiceOfWhoop"
        hoursOfSleep:
          $ref: "#/components/schemas/VoiceOfWhoop"
        naps:
          $ref: "#/components/schemas/VoiceOfWhoop"
        recentStrain:
          $ref: "#/components/schemas/VoiceOfWhoop"
        sleepDebt:
          $ref: "#/components/schemas/VoiceOfWhoop"
        sleepDisturbances:
          $ref: "#/components/schemas/VoiceOfWhoop"
        sleepLatency:
          $ref: "#/components/schemas/VoiceOfWhoop"
        sleepNeed:
          $ref: "#/components/schemas/VoiceOfWhoop"
        sleepPerformanceScore:
          $ref: "#/components/schemas/VoiceOfWhoop"
        timeInBed:
          $ref: "#/components/schemas/VoiceOfWhoop"
    VoiceTargetData:
      type: "object"
    VoiceActivitySpan:
      allOf:
        - $ref: "#/components/schemas/VoiceTargetData"
        - type: "object"
          properties:
            activityId:
              type: "integer"
              format: "int32"
            prevActivityId:
              type: "integer"
              format: "int32"
              
    VoiceCycleSpan:
      allOf:
        - $ref: "#/components/schemas/VoiceTargetData"
        - type: "object"
          properties:
            cycleId:
              type: "integer"
              format: "int32"
            prevCycleId:
              type: "integer"
              format: "int32"
              
    VoiceSingleCycle:
      allOf:
        - $ref: "#/components/schemas/VoiceTargetData"
        - type: "object"
          properties:
            cycleId:
              type: "integer"
              format: "int32"
              
    VoiceSingleActivity:
      allOf:
        - $ref: "#/components/schemas/VoiceTargetData"
        - type: "object"
          properties:
            activityId:
              type: "integer"
              format: "int32"
    
    VoiceTimeSpan:
      allOf:
        - $ref: "#/components/schemas/VoiceTargetData"
        - type: "object"
          properties:
            until:
              type: "string"
              format: "date"
              example: "2020-08-25"
            duration:
              type: "string"
              example: "1w,2w,1m,3m,6m"
    ActivityType:
      description: "Type of activity on the whoop platform"
      properties:
        id: 
          type: "integer"
          format: "int32"
          example: 84
        named: 
          type: "string"
          example: "Jumping Rope"
        createdAt:
          type: "string"
          format: "date-time"
          example: "2019-08-16T22:50:09.178Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2019-08-16T22:50:14.814Z"
        hasGps:
          type: "boolean"
          example: false
        iconUrl:
          type: "string"
          example: "https://s3-us-west-2.amazonaws.com/icons.whoop.com/mobile/activities/jumping_rope.png"
        isCurrent: 
          type: "boolean"
          example: true
        hasSurvey:
          type: "boolean"
          example: true
        category:
          type: "string"
          example: "cardiovascular|non-cardiovascular"
          
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer